class MyCircularDeque {
    
    int []q;
    int front,rear,size;
    
    public MyCircularDeque(int k) {
        rear=0;
        size=0;
        front=k-1;
        q= new int[k];   
    }
    
    public boolean insertFront(int value) {
       if(!isFull()){
           q[front]=value;
           front=(front-1+q.length)%q.length;
           size+=1;
           return true;
       }
        return false;
    }
    
    public boolean insertLast(int value) {
        if(!isFull()){
           q[rear]=value;
           rear=(rear+1+q.length)%q.length;
           size+=1;
           return true;
       }
        return false;
    }
    
    public boolean deleteFront() {
        if(!isEmpty()){
            front= (front+1)%q.length;
            size-=1;
            return true;
        }
        return false;
    }
    
    public boolean deleteLast() {
        if(!isEmpty()){
            rear= (rear-1+q.length)%q.length;
            size-=1;
            return true;
        }
        return false;
    }
    
    public int getFront() {
        if(isEmpty())
            return -1;
        else{
            return q[(front+1)%q.length];
        }
    }
    
    public int getRear() {
        if(isEmpty())
            return -1;
        else{
            return q[(rear-1+q.length)%q.length];
        }
    }
    
    public boolean isEmpty() {
        return size==0;
    }
    
    public boolean isFull() {
        return size==q.length;
    }
}

/**
 * Your MyCircularDeque object will be instantiated and called as such:
 * MyCircularDeque obj = new MyCircularDeque(k);
 * boolean param_1 = obj.insertFront(value);
 * boolean param_2 = obj.insertLast(value);
 * boolean param_3 = obj.deleteFront();
 * boolean param_4 = obj.deleteLast();
 * int param_5 = obj.getFront();
 * int param_6 = obj.getRear();
 * boolean param_7 = obj.isEmpty();
 * boolean param_8 = obj.isFull();
 */
